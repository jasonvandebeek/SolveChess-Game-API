pipeline {
    agent any
    environment {
        dockerRegistry = "jasonvandebeek/solvechess-game-api"
        dockerRegistryCredential = 'dockerhub_id'  
		scannerHome = tool 'SonarScanner for MSBuild'		
    }
    stages {
        stage('Build .NET Application') {
            steps {
                script {
					sh "dotnet clean"
					sh "dotnet restore"
                    sh "dotnet build"
                }
            }
        }
		stage('Run .NET Unit Tests') {
			steps {
				script {
					sh "dotnet test UnitTests/UnitTests.csproj"
				}
			}
		}
		stage('Run .NET Integration Tests') {
			steps {
				script {
					sh "dotnet test IntegrationTests/IntegrationTests.csproj"
				}
			}
		}
		stage('SonarQube Analysis') {
			steps {
				withSonarQubeEnv('SonarQube') {
					sh "dotnet ${scannerHome}/SonarScanner.MSBuild.dll begin /k:\"jasonvandebeek_SolveChess-Game-API_AYv24FrENlosHZj9qme1\" /d:sonar.cs.vscoveragexml.reportsPaths=coverage.xml"
					sh "dotnet build --no-incremental"
					sh "/var/lib/jenkins/.dotnet/tools/dotnet-coverage collect 'dotnet test' -f xml  -o 'coverage.xml'"
					sh "dotnet ${scannerHome}/SonarScanner.MSBuild.dll end"
				}
			}
		}
		stage("SonarQube Quality Gate") {
			steps {
				script {
					def qg = waitForQualityGate()
					if (qg.status != 'OK') {
						error "Pipeline aborted due to quality gate failure: ${qg.status}"
					}
				}
			}
		}
		stage('Build Docker Image') {
			steps {
				script {
					dockerImage = docker.build "${dockerRegistry}:latest"
				}
			}
		}
        stage('Publish to Docker Hub') {
            steps {
                script {
                    docker.withRegistry('', dockerRegistryCredential) {
                        dockerImage.push()
                    }
                }
            }
        }
        stage('Cleaning up') {
            steps {
                sh "docker rmi ${dockerRegistry}:latest"
            }
        }
    }
}